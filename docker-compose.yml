version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/postgres:15-alpine
    container_name: hmf_ehr_postgres
    environment:
      POSTGRES_DB: hmf_ehr
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - hmf_ehr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d hmf_ehr"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis 缓存
  redis:
    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/redis:7-alpine
    container_name: hmf_ehr_redis
    command: redis-server --appendonly yes --requirepass ""
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hmf_ehr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # 后端应用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: hmf_ehr_backend
    environment:
      NODE_ENV: production
      PORT: 8080
      API_PREFIX: api/v1
      
      # 数据库配置
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_DATABASE: hmf_ehr
      DB_SCHEMA: public
      DB_SYNCHRONIZE: false
      DB_LOGGING: false
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      
      # JWT配置
      JWT_SECRET: hmf-ehr-super-secret-jwt-key-production-2024
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_SECRET: hmf-ehr-super-secret-refresh-key-production-2024
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # 其他配置
      UPLOAD_PATH: ./uploads
      MAX_FILE_SIZE: 10485760
      LOG_LEVEL: info
      LOG_MAX_FILES: 14d
      THROTTLE_TTL: 60
      THROTTLE_LIMIT: 100
      CORS_ORIGIN: http://localhost
      BCRYPT_SALT_ROUNDS: 12
    ports:
      - "8080:8080"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    networks:
      - hmf_ehr_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: hmf_ehr_frontend
    environment:
      # 这些变量在构建时使用，运行时由nginx配置处理
      VITE_API_BASE_URL: http://localhost
      VITE_API_PREFIX: /api/v1
    networks:
      - hmf_ehr_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx 反向代理
  nginx:
    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/nginx:alpine3.22-slim
    container_name: hmf_ehr_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - hmf_ehr_network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/backend
  backend_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./uploads
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx

networks:
  hmf_ehr_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
